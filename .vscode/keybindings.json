// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "alt+x left",
        "command": "paredit.spliceSexpKillBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+backspace",
        "command": "-paredit.spliceSexpKillBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+space",
        "command": "paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+right",
        "command": "-paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "editor.action.inspectTMScopes"
    },
    {
        "key": "ctrl+k s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.saveFiles"
    },
    {
        "key": "ctrl+left",
        "command": "paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+,",
        "command": "-paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+right",
        "command": "paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+.",
        "command": "-paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+s",
        "command": "paredit.splitSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-paredit.splitSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+j",
        "command": "paredit.joinSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-paredit.joinSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "ctrl+b",
        "command": "editor.action.revealDeclaration"
    },
    {
        "key": "ctrl+alt+c ctrl+alt+space",
        "command": "-calva.sendCurrentTopLevelFormToOutputWindow",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "alt+d",
        "command": "paredit.killRight",
        "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-paredit.killRight",
        "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+m",
        "command": "-extension.toggleCase",
        "when": "editorHasSelection"
    },
    {
        "key": "shift+alt+u",
        "command": "editor.action.transformToUppercase"
    },
    {
        "key": "alt+x alt+left",
        "command": "paredit.spliceSexpKillBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "shift+alt+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "calva.loadFile",
        "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+c enter",
        "command": "-calva.loadFile",
        "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "alt+c l",
        "command": "calva.loadFile",
        "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "alt+c alt+n",
        "command": "calva.setOutputWindowNamespace",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+c n",
        "command": "-calva.setOutputWindowNamespace",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "shift+alt+n",
        "command": "calva.setOutputWindowNamespace",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'"
    },
    {
        "key": "alt+c z",
        "command": "calva.showOutputWindow",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive"
    },
    {
        "key": "ctrl+alt+o o",
        "command": "-calva.showOutputWindow",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive"
    },
    {
        "key": "alt+c alt+z",
        "command": "calva.showOutputWindow",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive"
    },
    {
        "key": "alt+x 3",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "alt+x 2",
        "command": "workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "alt+x 0",
        "command": "workbench.action.joinAllGroups"
    },
    {
        "key": "alt+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "alt+`",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "alt+1",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+alt+x",
        "command": "calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+b",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+t",
        "command": "git.sync"
    },
    {
        "key": "ctrl+p",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+f12",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.closeSidebar"
    },
    {
        "key": "enter",
        "command": "search.action.focusSearchList",
        "when": "searchInputBoxFocus"
    }
]
